{"version":3,"sources":["app/pipes/bundlesFilter.pipe.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;YAQA;gBAEI,uBAAoB,WAAuB;oBAAvB,gBAAW,GAAX,WAAW,CAAY;gBAAI,CAAC;gBAEhD,iCAAS,GAAT,UAAU,OAAiB,EAAE,IAAW;oBACpC,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;wBAClB,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;wBACrC,MAAM,CAAC,eAAM,CAAC,CAAC,CAAC,CAAC;oBACrB,CAAC;oBACD,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC;wBAChC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;wBAClD,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,IAAI,EAAJ,CAAI,CAAC,CAAC;oBAC1C,CAAC;oBACD,IAAI,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,UAAA,MAAM,IAAI,OAAA,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC,EAAnD,CAAmD,CAAC,CAAC;oBACpG,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;oBAE1D,IAAI,OAAO,GAAa,EAAE,CAAC;oBAC3B,eAAe,CAAC,OAAO,CAAC,UAAA,MAAM;wBAC1B,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;oBAC5B,CAAC,CAAC,CAAC;oBACH,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;oBAE1C,MAAM,CAAC,eAAe,CAAC;gBAC3B,CAAC;gBA3BL;oBAAC,WAAI,CAAC;wBACF,IAAI,EAAE,eAAe;qBACxB,CAAC;oBACD,iBAAU,EAAE;;iCAAA;gBAyBb,oBAAC;YAAD,CAxBA,AAwBC,IAAA;YAxBD,yCAwBC,CAAA","file":"app/pipes/bundlesFilter.pipe.js","sourcesContent":["import {Injectable, Pipe, PipeTransform} from '@angular/core';\nimport {Bundle} from '../domain/bundle';\nimport {AppGlobals} from '../services/appglobals.service';\n\n@Pipe({\n    name: 'bundlesFilter'\n})\n@Injectable()\nexport class BundlesFilter implements PipeTransform {\n\n    constructor(private _appGlobals: AppGlobals) { }\n\n    transform(bundles: Bundle[], args: any[]): any {\n        if (bundles == null) {\n            this._appGlobals.setFilteredCount(0);\n            return Bundle[0];\n        }\n        if (typeof args[0] == 'undefined') {\n            this._appGlobals.setFilteredCount(bundles.length);\n            return bundles.filter(bundle => true);\n        }\n        var filteredBundles = bundles.filter(bundle => bundle.symbolicName.indexOf(args.toString()) !== -1);\n        this._appGlobals.setFilteredCount(filteredBundles.length);\n\n        var theList: string[] = [];\n        filteredBundles.forEach(bundle => {\n            theList.push(bundle.id);\n        });\n        this._appGlobals.setBundleIdList(theList);\n\n        return filteredBundles;\n    }\n}"],"sourceRoot":"/source/"}