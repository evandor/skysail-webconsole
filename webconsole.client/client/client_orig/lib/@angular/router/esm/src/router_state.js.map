{"version":3,"file":"router_state.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/router_state.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;OAGI,EAAC,eAAe,EAAC,MAAM,sBAAsB;OAI7C,EAAC,cAAc,EAAS,MAAM,UAAU;OACxC,EAAC,iBAAiB,EAAsB,MAAM,YAAY;OAC1D,EAAC,YAAY,EAAE,kBAAkB,EAAC,MAAM,oBAAoB;OAC5D,EAAC,IAAI,EAAE,QAAQ,EAAC,MAAM,cAAc;AAG3C;;;;;;;;;;;;;;GAcG;AACH,iCAAiC,IAAI;IACnC;;OAEG;IACH,YACI,IAA8B,EAAS,WAA+B,EAC/D,QAA4B,EAAS,QAA6B;QAC3E,MAAM,IAAI,CAAC,CAAC;QAF6B,gBAAW,GAAX,WAAW,CAAoB;QAC/D,aAAQ,GAAR,QAAQ,CAAoB;QAAS,aAAQ,GAAR,QAAQ,CAAqB;IAE7E,CAAC;IAED,QAAQ,KAAa,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;AACzD,CAAC;AAED,iCAAiC,OAAgB,EAAE,aAAmB;IACpE,MAAM,QAAQ,GAAG,wBAAwB,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IAClE,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,CAAC,IAAI,iBAAiB,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACtE,MAAM,WAAW,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;IAC5C,MAAM,gBAAgB,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;IACjD,MAAM,QAAQ,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;IACzC,MAAM,SAAS,GACX,IAAI,cAAc,CAAC,QAAQ,EAAE,WAAW,EAAE,cAAc,EAAE,aAAa,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC5F,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC,IAAI,CAAC;IACnC,MAAM,CAAC,IAAI,WAAW,CAClB,IAAI,QAAQ,CAAiB,SAAS,EAAE,EAAE,CAAC,EAAE,gBAAgB,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;AACzF,CAAC;AAED,kCAAkC,OAAgB,EAAE,aAAmB;IACrE,MAAM,WAAW,GAAG,EAAE,CAAC;IACvB,MAAM,gBAAgB,GAAG,EAAE,CAAC;IAC5B,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,MAAM,SAAS,GAAG,IAAI,sBAAsB,CACxC,EAAE,EAAE,WAAW,EAAE,cAAc,EAAE,aAAa,EAAE,IAAI,EAAE,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5E,MAAM,CAAC,IAAI,mBAAmB,CAC1B,EAAE,EAAE,IAAI,QAAQ,CAAyB,SAAS,EAAE,EAAE,CAAC,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;AAC3F,CAAC;AAED;;;;;;;;;;;;;;GAcG;AACH;IAKE;;OAEG;IACH,YACW,GAAoC,EAAS,MAA0B,EACvE,MAAc,EAAS,SAAsB,EACpD,cAAsC;QAF/B,QAAG,GAAH,GAAG,CAAiC;QAAS,WAAM,GAAN,MAAM,CAAoB;QACvE,WAAM,GAAN,MAAM,CAAQ;QAAS,cAAS,GAAT,SAAS,CAAa;QAEtD,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;IACxC,CAAC;IAED,QAAQ;QACN,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,UAAU,IAAI,CAAC,eAAe,GAAG,CAAC;IACtF,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;GAYG;AACH;IAeE;;OAEG;IACH,YACW,GAAwB,EAAS,MAAc,EAAS,MAAc,EACtE,SAAsB,EAAE,WAAkB,EAAE,UAAsB,EACzE,aAAqB;QAFd,QAAG,GAAH,GAAG,CAAqB;QAAS,WAAM,GAAN,MAAM,CAAQ;QAAS,WAAM,GAAN,MAAM,CAAQ;QACtE,cAAS,GAAT,SAAS,CAAa;QAE/B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;QAC9B,IAAI,CAAC,cAAc,GAAG,aAAa,CAAC;IACtC,CAAC;IAED,QAAQ;QACN,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACtD,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,EAAE,CAAC;QAChE,MAAM,CAAC,cAAc,GAAG,YAAY,OAAO,IAAI,CAAC;IAClD,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;GAYG;AACH,yCAAyC,IAAI;IAC3C;;OAEG;IACH,YACW,GAAW,EAAE,IAAsC,EAAS,WAAmB,EAC/E,QAAgB;QACzB,MAAM,IAAI,CAAC,CAAC;QAFH,QAAG,GAAH,GAAG,CAAQ;QAAiD,gBAAW,GAAX,WAAW,CAAQ;QAC/E,aAAQ,GAAR,QAAQ,CAAQ;IAE3B,CAAC;IAED,QAAQ,KAAa,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC;AAED,uBAAuB,IAAsC;IAC3D,MAAM,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IACjG,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC;AAC7B,CAAC;AAGD;;;;GAIG;AACH,sCAAsC,KAAqB;IACzD,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;QACnB,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjE,KAAK,CAAC,MAAO,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;QACzD,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACjE,KAAK,CAAC,GAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;QACnD,CAAC;QACD,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,eAAe,CAAC;IACzC,CAAC;IAAC,IAAI,CAAC,CAAC;QACN,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,eAAe,CAAC;IACzC,CAAC;AACH,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentFactory, Type} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport {Observable} from 'rxjs/Observable';\n\nimport {Route} from './config';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlPathWithParams, UrlSegment, UrlTree} from './url_tree';\nimport {shallowEqual, shallowEqualArrays} from './utils/collection';\nimport {Tree, TreeNode} from './utils/tree';\n\n\n/**\n * The state of the router.\n *\n * ### Usage\n *\n * ```\n * class MyComponent {\n *   constructor(router: Router) {\n *     const state = router.routerState;\n *     const id: Observable<string> = state.firstChild(state.root).params.map(p => p.id);\n *     const isDebug: Observable<string> = state.queryParams.map(q => q.debug);\n *   }\n * }\n * ```\n */\nexport class RouterState extends Tree<ActivatedRoute> {\n  /**\n   * @internal\n   */\n  constructor(\n      root: TreeNode<ActivatedRoute>, public queryParams: Observable<Params>,\n      public fragment: Observable<string>, public snapshot: RouterStateSnapshot) {\n    super(root);\n  }\n\n  toString(): string { return this.snapshot.toString(); }\n}\n\nexport function createEmptyState(urlTree: UrlTree, rootComponent: Type): RouterState {\n  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);\n  const emptyUrl = new BehaviorSubject([new UrlPathWithParams('', {})]);\n  const emptyParams = new BehaviorSubject({});\n  const emptyQueryParams = new BehaviorSubject({});\n  const fragment = new BehaviorSubject('');\n  const activated =\n      new ActivatedRoute(emptyUrl, emptyParams, PRIMARY_OUTLET, rootComponent, snapshot.root);\n  activated.snapshot = snapshot.root;\n  return new RouterState(\n      new TreeNode<ActivatedRoute>(activated, []), emptyQueryParams, fragment, snapshot);\n}\n\nfunction createEmptyStateSnapshot(urlTree: UrlTree, rootComponent: Type): RouterStateSnapshot {\n  const emptyParams = {};\n  const emptyQueryParams = {};\n  const fragment = '';\n  const activated = new ActivatedRouteSnapshot(\n      [], emptyParams, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1);\n  return new RouterStateSnapshot(\n      '', new TreeNode<ActivatedRouteSnapshot>(activated, []), emptyQueryParams, fragment);\n}\n\n/**\n * Contains the information about a component loaded in an outlet. The information is provided\n * through\n * the params and urlSegments observables.\n *\n * ### Usage\n *\n * ```\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: Observable<string> = route.params.map(p => p.id);\n *   }\n * }\n * ```\n */\nexport class ActivatedRoute {\n  /** @internal */\n  _futureSnapshot: ActivatedRouteSnapshot;\n  snapshot: ActivatedRouteSnapshot;\n\n  /**\n   * @internal\n   */\n  constructor(\n      public url: Observable<UrlPathWithParams[]>, public params: Observable<Params>,\n      public outlet: string, public component: Type|string,\n      futureSnapshot: ActivatedRouteSnapshot) {\n    this._futureSnapshot = futureSnapshot;\n  }\n\n  toString(): string {\n    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;\n  }\n}\n\n/**\n * Contains the information about a component loaded in an outlet at a particular moment in time.\n *\n * ### Usage\n *\n * ```\n * class MyComponent {\n *   constructor(route: ActivatedRoute) {\n *     const id: string = route.snapshot.params.id;\n *   }\n * }\n * ```\n */\nexport class ActivatedRouteSnapshot {\n  /**\n   * @internal\n   */\n  _resolvedComponentFactory: ComponentFactory<any>;\n\n  /** @internal **/\n  _routeConfig: Route;\n\n  /** @internal **/\n  _urlSegment: UrlSegment;\n\n  /** @internal */\n  _lastPathIndex: number;\n\n  /**\n   * @internal\n   */\n  constructor(\n      public url: UrlPathWithParams[], public params: Params, public outlet: string,\n      public component: Type|string, routeConfig: Route, urlSegment: UrlSegment,\n      lastPathIndex: number) {\n    this._routeConfig = routeConfig;\n    this._urlSegment = urlSegment;\n    this._lastPathIndex = lastPathIndex;\n  }\n\n  toString(): string {\n    const url = this.url.map(s => s.toString()).join('/');\n    const matched = this._routeConfig ? this._routeConfig.path : '';\n    return `Route(url:'${url}', path:'${matched}')`;\n  }\n}\n\n/**\n * The state of the router at a particular moment in time.\n *\n * ### Usage\n *\n * ```\n * class MyComponent {\n *   constructor(router: Router) {\n *     const snapshot = router.routerState.snapshot;\n *   }\n * }\n * ```\n */\nexport class RouterStateSnapshot extends Tree<ActivatedRouteSnapshot> {\n  /**\n   * @internal\n   */\n  constructor(\n      public url: string, root: TreeNode<ActivatedRouteSnapshot>, public queryParams: Params,\n      public fragment: string) {\n    super(root);\n  }\n\n  toString(): string { return serializeNode(this._root); }\n}\n\nfunction serializeNode(node: TreeNode<ActivatedRouteSnapshot>): string {\n  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(\", \")} } ` : '';\n  return `${node.value}${c}`;\n}\n\n\n/**\n * The expectation is that the activate route is created with the right set of parameters.\n * So we push new values into the observables only when they are not the initial values.\n * And we detect that by checking if the snapshot field is set.\n */\nexport function advanceActivatedRoute(route: ActivatedRoute): void {\n  if (route.snapshot) {\n    if (!shallowEqual(route.snapshot.params, route._futureSnapshot.params)) {\n      (<any>route.params).next(route._futureSnapshot.params);\n    }\n    if (!shallowEqualArrays(route.snapshot.url, route._futureSnapshot.url)) {\n      (<any>route.url).next(route._futureSnapshot.url);\n    }\n    route.snapshot = route._futureSnapshot;\n  } else {\n    route.snapshot = route._futureSnapshot;\n  }\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}