/**
 * Welcome to ng2tree
 */
"use strict";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2RlZnMvYXBpLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztHQUVHIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXZWxjb21lIHRvIG5nMnRyZWVcbiAqL1xuXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFRyZWVPcHRpb25zIH0gZnJvbSAnLi4vbW9kZWxzL3RyZWUtb3B0aW9ucy5tb2RlbCc7XG4vKipcbiAqIFRoaXMgaXMgdGhlIGludGVyZmFjZSBvZiBhIHNpbmdsZSBUcmVlIE5vZGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJVHJlZU5vZGUge1xuICAvLyBwcm9wZXJ0aWVzXG4gIC8qKlxuICAgKiBQYXJlbnQgbm9kZVxuICAgKi9cbiAgcGFyZW50OiBJVHJlZU5vZGU7XG4gIC8qKlxuICAgKiBUaGUgdmFsdWUgb2YgdGhlIG5vZGUncyBmaWVsZCB0aGF0IGlzIHVzZWQgZm9yIGRpc3BsYXlpbmcgaXRzIGNvbnRlbnQuXG4gICAqIEJ5IGRlZmF1bHQgJ25hbWUnLCB1bmxlc3Mgc3RhdGVkIG90aGVyd2lzZSBpbiB0aGUgb3B0aW9uc1xuICAgKi9cbiAgZGlzcGxheUZpZWxkOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgY2hpbGRyZW4gb2YgdGhlIG5vZGUuXG4gICAqIEJ5IGRlZmF1bHQgaXMgZGV0ZXJtaW5lZCBieSAnbm9kZS5kYXRhLmNoaWxkcmVuJywgdW5sZXNzIHN0YXRlZCBvdGhlcndpc2UgaW4gdGhlIG9wdGlvbnNcbiAgICovXG4gIGNoaWxkcmVuOiBJVHJlZU5vZGVbXTtcbiAgLyoqXG4gICAqIFBvaW50ZXIgdG8gdGhlIG9yaWdpbmFsIGRhdGEuXG4gICAqL1xuICBkYXRhOiBhbnk7XG4gIC8qKlxuICAgKiBQb2ludGVyIHRvIHRoZSBFbGVtZW50UmVmIG9mIHRoZSBUcmVlTm9kZUNvbXBvbmVudCB0aGF0J3MgZGlzcGxheWluZyB0aGlzIG5vZGVcbiAgICovXG4gIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY7XG4gIC8qKlxuICAgKiBMZXZlbCBpbiB0aGUgdHJlZSAoc3RhcnRzIGZyb20gMSkuXG4gICAqL1xuICBsZXZlbDogbnVtYmVyO1xuICAvKipcbiAgICogUGF0aCBpbiB0aGUgdHJlZTogQXJyYXkgb2YgSURzLlxuICAgKi9cbiAgcGF0aDogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIEEgdW5pcXVlIGtleSBvZiB0aGlzIG5vZGUgYW1vbmcgaXRzIHNpYmxpbmdzLlxuICAgKiBCeSBkZWZhdWx0IGl0J3MgdGhlICdpZCcgb2YgdGhlIG9yaWdpbmFsIG5vZGUsIHVubGVzcyBzdGF0ZWQgb3RoZXJ3aXNlIGluIG9wdGlvbnMuaWRGaWVsZFxuICAgKi9cbiAgaWQ6IGFueTtcblxuICAvLyBoZWxwZXJzXG4gIGlzRXhwYW5kZWQ6IGJvb2xlYW47XG4gIGlzQWN0aXZlOiBib29sZWFuO1xuICBpc0ZvY3VzZWQ6Ym9vbGVhbjtcbiAgaXNDb2xsYXBzZWQ6Ym9vbGVhbjtcbiAgaXNMZWFmOmJvb2xlYW47XG4gIGhhc0NoaWxkcmVuOmJvb2xlYW47XG4gIGlzUm9vdDpib29sZWFuO1xuXG4gIC8vIHRyYXZlcnNpbmdcbiAgLyoqXG4gICAqIEByZXR1cm5zIG5leHQgc2libGluZyAob3IgbnVsbClcbiAgICovXG4gIGZpbmROZXh0U2libGluZygpOiBJVHJlZU5vZGU7XG4gIC8qKlxuICAgKiBAcmV0dXJucyBwcmV2aW91cyBzaWJsaW5nIChvciBudWxsKVxuICAgKi9cbiAgZmluZFByZXZpb3VzU2libGluZygpOiBJVHJlZU5vZGU7XG4gIC8qKlxuICAgKiBAcmV0dXJucyBmaXJzdCBjaGlsZCAob3IgbnVsbClcbiAgICovXG4gIGdldEZpcnN0Q2hpbGQoKTogSVRyZWVOb2RlO1xuICAvKipcbiAgICogQHJldHVybnMgbGFzdCBjaGlsZCAob3IgbnVsbClcbiAgICovXG4gIGdldExhc3RDaGlsZCgpOiBJVHJlZU5vZGU7XG4gIC8qKlxuICAgKiBGaW5kcyB0aGUgdmlzdWFsbHkgbmV4dCBub2RlIGluIHRoZSB0cmVlLlxuICAgKiBAcmV0dXJucyBuZXh0IG5vZGUuXG4gICAqIEBwYXJhbSBnb0luc2lkZSB3aGV0aGVyIHRvIGxvb2sgZm9yIGNoaWxkcmVuIG9yIGp1c3Qgc2libGluZ3NcbiAgICovXG4gIGZpbmROZXh0Tm9kZShnb0luc2lkZTogYm9vbGVhbik6IElUcmVlTm9kZTtcbiAgLyoqXG4gICAqIEZpbmRzIHRoZSB2aXN1YWxseSBwcmV2aW91cyBub2RlIGluIHRoZSB0cmVlLlxuICAgKiBAcmV0dXJucyBwcmV2aW91cyBub2RlLlxuICAgKi9cbiAgZmluZFByZXZpb3VzTm9kZSgpOiBJVHJlZU5vZGU7XG5cbiAgLy8gYWN0aW9uc1xuICAvKipcbiAgICogRXhwYW5kcyAvIENvbGxhcHNlcyB0aGUgbm9kZVxuICAgKi9cbiAgdG9nZ2xlKCk7XG4gIC8qKlxuICAgKiBBY3RpdmF0ZXMgLyBEZWFjdGl2YXRlcyB0aGUgbm9kZSAoc2VsZWN0cyAvIGRlc2VsZWN0cylcbiAgICovXG4gIHRvZ2dsZUFjdGl2YXRlZCgpO1xuICAvKipcbiAgICogRm9jdXMgb24gdGhlIG5vZGVcbiAgICovXG4gIGZvY3VzKCk7XG4gIC8qKlxuICAgKiBCbHVyICh1bmZvY3VzKSB0aGUgbm9kZVxuICAgKi9cbiAgYmx1cigpO1xuICAvKipcbiAgICogRmlyZSBhbiBldmVudCB0byB0aGUgcmVuZGVyZXIgb2YgdGhlIHRyZWUgKGlmIGl0IHdhcyByZWdpc3RlcmVkKVxuICAgKi9cbiAgZmlyZUV2ZW50KGV2ZW50OiBhbnkpO1xufVxuXG4vKipcbiAqIFRoaXMgaXMgdGhlIGludGVyZmFjZSBvZiB0aGUgVHJlZU1vZGVsXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVRyZWVNb2RlbCB7XG4gIC8vIHByb3BlcnRpZXNcbiAgLyoqXG4gICAqIEFsbCByb290IG5vZGVzXG4gICAqL1xuICByb290czogSVRyZWVOb2RlW107XG4gIC8qKlxuICAgKiBDdXJyZW50IGFjdGl2ZSAoc2VsZWN0ZWQpIG5vZGVcbiAgICovXG4gIGFjdGl2ZU5vZGU6IElUcmVlTm9kZTtcbiAgLyoqXG4gICAqIEN1cnJlbnQgZm9jdXNlZCBub2RlXG4gICAqL1xuICBmb2N1c2VkTm9kZTogSVRyZWVOb2RlO1xuICAvKipcbiAgICogT3B0aW9ucyB0aGF0IHdlcmUgcGFzc2VkIHRvIHRoZSB0cmVlIGNvbXBvbmVudFxuICAgKi9cbiAgb3B0aW9uczogVHJlZU9wdGlvbnM7XG5cbiAgLyoqXG4gICAqIElzIHRoZSB0cmVlIGN1cnJlbnRseSBmb2N1c2VkXG4gICAqL1xuICBpc0ZvY3VzZWQ6IGJvb2xlYW47XG5cbiAgLy8gaGVscGVyc1xuICAvKipcbiAgICogQHJldHVybnMgICAgICBmaXJzdCByb290IG9mIHRoZSB0cmVlXG4gICAqL1xuICBnZXRGaXJzdFJvb3QoKTogSVRyZWVOb2RlO1xuICAvKipcbiAgICogQHJldHVybnMgICAgICBsYXN0IHJvb3Qgb2YgdGhlIHRyZWVcbiAgICovXG4gIGdldExhc3RSb290KCk6IElUcmVlTm9kZTtcblxuICAvLyBhY3Rpb25zXG4gIC8qKlxuICAgKiBGb2N1c2VzIG9yIGJsdXJzIHRoZSB0cmVlXG4gICAqIEBwYXJhbSB2YWx1ZSAgdHJ1ZSBvciBmYWxzZSAtIHdoZXRoZXIgdG8gc2V0IGZvY3VzIG9yIGJsdXIuXG4gICAqL1xuICBzZXRGb2N1cyh2YWx1ZTogYm9vbGVhbik7XG4gIC8qKlxuICAgKiBGb2N1c2VzIG9uIHRoZSBuZXh0IG5vZGUgaW4gdGhlIHRyZWUgKHNhbWUgYXMgZG93biBhcnJvdylcbiAgICovXG4gIGZvY3VzTmV4dE5vZGUoKTtcbiAgLyoqXG4gICAqIEZvY3VzZXMgb24gdGhlIHByZXZpb3VzIG5vZGUgaW4gdGhlIHRyZWUgKHNhbWUgYXMgdXAgYXJyb3cpXG4gICAqL1xuICBmb2N1c1ByZXZpb3VzTm9kZSgpO1xuICAvKipcbiAgICogRm9jdXNlcyBvbiB0aGUgaW5uZXIgY2hpbGQgb2YgdGhlIGN1cnJlbnQgZm9jdXNlZCBub2RlIChzYW1lIGFzIHJpZ2h0IGFycm93IG9uIGFuIGV4cGFuZGVkIG5vZGUpXG4gICAqL1xuICBmb2N1c0RyaWxsRG93bigpO1xuICAvKipcbiAgICogRm9jdXNlcyBvbiB0aGUgcGFyZW50IG9mIHRoZSBjdXJyZW50IGZvY3VzZWQgbm9kZSAoc2FtZSBhcyBsZWZ0IGFycm93IG9uIGEgY29sbGFwc2VkIG5vZGUpXG4gICAqL1xuICBmb2N1c0RyaWxsVXAoKTtcbn1cbiJdfQ==