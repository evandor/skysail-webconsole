/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('@angular/core/src/linker/ng_module_factory');
var import1 = require('@angular/common/src/common_module');
var import2 = require('@angular/common/src/localization');
var import4 = require('@angular/core/src/i18n/tokens');
var CommonModuleInjector = (function (_super) {
    __extends(CommonModuleInjector, _super);
    function CommonModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(CommonModuleInjector.prototype, "_NgLocalization_1", {
        get: function () {
            if ((this.__NgLocalization_1 == null)) {
                (this.__NgLocalization_1 = new import2.NgLocaleLocalization(this.parent.get(import4.LOCALE_ID)));
            }
            return this.__NgLocalization_1;
        },
        enumerable: true,
        configurable: true
    });
    CommonModuleInjector.prototype.createInternal = function () {
        this._CommonModule_0 = new import1.CommonModule();
        return this._CommonModule_0;
    };
    CommonModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import1.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import2.NgLocalization)) {
            return this._NgLocalization_1;
        }
        return notFoundResult;
    };
    CommonModuleInjector.prototype.destroyInternal = function () {
    };
    return CommonModuleInjector;
}(import0.NgModuleInjector));
exports.CommonModuleNgFactory = new import0.NgModuleFactory(CommonModuleInjector, import1.CommonModule);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uX21vZHVsZS5uZ2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb21waWxlZDIxL25vZGVfbW9kdWxlcy9AYW5ndWxhci9jb21tb24vc3JjL2NvbW1vbl9tb2R1bGUubmdmYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNGLG9CQUFvQjs7Ozs7OztBQUVyQixJQUFZLE9BQU8sV0FBTSw0Q0FBNEMsQ0FBQyxDQUFBO0FBQ3RFLElBQVksT0FBTyxXQUFNLG1DQUFtQyxDQUFDLENBQUE7QUFDN0QsSUFBWSxPQUFPLFdBQU0sa0NBQWtDLENBQUMsQ0FBQTtBQUU1RCxJQUFZLE9BQU8sV0FBTSwrQkFBK0IsQ0FBQyxDQUFBO0FBQ3pEO0lBQW1DLHdDQUE4QztJQUcvRSw4QkFBWSxNQUF1QjtRQUNqQyxrQkFBTSxNQUFNLEVBQUUsRUFBWSxFQUFFLEVBQVksQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFDRCxzQkFBSSxtREFBaUI7YUFBckI7WUFDRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsSUFBSyxJQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxPQUFPLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLENBQUM7WUFDckosTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQztRQUNqQyxDQUFDOzs7T0FBQTtJQUNELDZDQUFjLEdBQWQ7UUFDRSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2xELE1BQU0sQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQzlCLENBQUM7SUFDRCwwQ0FBVyxHQUFYLFVBQVksS0FBUyxFQUFDLGNBQWtCO1FBQ3RDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUFDLENBQUM7UUFDdEUsRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUM7UUFBQyxDQUFDO1FBQzFFLE1BQU0sQ0FBQyxjQUFjLENBQUM7SUFDeEIsQ0FBQztJQUNELDhDQUFlLEdBQWY7SUFDQSxDQUFDO0lBQ0gsMkJBQUM7QUFBRCxDQUFDLEFBckJELENBQW1DLE9BQU8sQ0FBQyxnQkFBZ0IsR0FxQjFEO0FBQ1ksNkJBQXFCLEdBQWlELElBQUksT0FBTyxDQUFDLGVBQWUsQ0FBQyxvQkFBb0IsRUFBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFRoaXMgZmlsZSBpcyBnZW5lcmF0ZWQgYnkgdGhlIEFuZ3VsYXIgMiB0ZW1wbGF0ZSBjb21waWxlci5cbiAqIERvIG5vdCBlZGl0LlxuICovXG4gLyogdHNsaW50OmRpc2FibGUgKi9cblxuaW1wb3J0ICogYXMgaW1wb3J0MCBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy9saW5rZXIvbmdfbW9kdWxlX2ZhY3RvcnknO1xuaW1wb3J0ICogYXMgaW1wb3J0MSBmcm9tICdAYW5ndWxhci9jb21tb24vc3JjL2NvbW1vbl9tb2R1bGUnO1xuaW1wb3J0ICogYXMgaW1wb3J0MiBmcm9tICdAYW5ndWxhci9jb21tb24vc3JjL2xvY2FsaXphdGlvbic7XG5pbXBvcnQgKiBhcyBpbXBvcnQzIGZyb20gJ0Bhbmd1bGFyL2NvcmUvc3JjL2RpL2luamVjdG9yJztcbmltcG9ydCAqIGFzIGltcG9ydDQgZnJvbSAnQGFuZ3VsYXIvY29yZS9zcmMvaTE4bi90b2tlbnMnO1xuY2xhc3MgQ29tbW9uTW9kdWxlSW5qZWN0b3IgZXh0ZW5kcyBpbXBvcnQwLk5nTW9kdWxlSW5qZWN0b3I8aW1wb3J0MS5Db21tb25Nb2R1bGU+IHtcbiAgX0NvbW1vbk1vZHVsZV8wOmltcG9ydDEuQ29tbW9uTW9kdWxlO1xuICBfX05nTG9jYWxpemF0aW9uXzE6aW1wb3J0Mi5OZ0xvY2FsZUxvY2FsaXphdGlvbjtcbiAgY29uc3RydWN0b3IocGFyZW50OmltcG9ydDMuSW5qZWN0b3IpIHtcbiAgICBzdXBlcihwYXJlbnQsKFtdIGFzIGFueVtdKSwoW10gYXMgYW55W10pKTtcbiAgfVxuICBnZXQgX05nTG9jYWxpemF0aW9uXzEoKTppbXBvcnQyLk5nTG9jYWxlTG9jYWxpemF0aW9uIHtcbiAgICBpZiAoKHRoaXMuX19OZ0xvY2FsaXphdGlvbl8xID09IChudWxsIGFzIGFueSkpKSB7ICh0aGlzLl9fTmdMb2NhbGl6YXRpb25fMSA9IG5ldyBpbXBvcnQyLk5nTG9jYWxlTG9jYWxpemF0aW9uKHRoaXMucGFyZW50LmdldChpbXBvcnQ0LkxPQ0FMRV9JRCkpKTsgfVxuICAgIHJldHVybiB0aGlzLl9fTmdMb2NhbGl6YXRpb25fMTtcbiAgfVxuICBjcmVhdGVJbnRlcm5hbCgpOmltcG9ydDEuQ29tbW9uTW9kdWxlIHtcbiAgICB0aGlzLl9Db21tb25Nb2R1bGVfMCA9IG5ldyBpbXBvcnQxLkNvbW1vbk1vZHVsZSgpO1xuICAgIHJldHVybiB0aGlzLl9Db21tb25Nb2R1bGVfMDtcbiAgfVxuICBnZXRJbnRlcm5hbCh0b2tlbjphbnksbm90Rm91bmRSZXN1bHQ6YW55KTphbnkge1xuICAgIGlmICgodG9rZW4gPT09IGltcG9ydDEuQ29tbW9uTW9kdWxlKSkgeyByZXR1cm4gdGhpcy5fQ29tbW9uTW9kdWxlXzA7IH1cbiAgICBpZiAoKHRva2VuID09PSBpbXBvcnQyLk5nTG9jYWxpemF0aW9uKSkgeyByZXR1cm4gdGhpcy5fTmdMb2NhbGl6YXRpb25fMTsgfVxuICAgIHJldHVybiBub3RGb3VuZFJlc3VsdDtcbiAgfVxuICBkZXN0cm95SW50ZXJuYWwoKTp2b2lkIHtcbiAgfVxufVxuZXhwb3J0IGNvbnN0IENvbW1vbk1vZHVsZU5nRmFjdG9yeTppbXBvcnQwLk5nTW9kdWxlRmFjdG9yeTxpbXBvcnQxLkNvbW1vbk1vZHVsZT4gPSBuZXcgaW1wb3J0MC5OZ01vZHVsZUZhY3RvcnkoQ29tbW9uTW9kdWxlSW5qZWN0b3IsaW1wb3J0MS5Db21tb25Nb2R1bGUpOyJdfQ==