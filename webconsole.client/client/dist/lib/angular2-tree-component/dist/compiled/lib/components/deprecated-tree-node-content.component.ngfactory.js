/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import1 = require('@angular/core/src/linker/view');
var import2 = require('@angular/core/src/linker/element');
var import3 = require('../../../lib/components/deprecated-tree-node-content.component');
var import6 = require('@angular/core/src/linker/view_type');
var import7 = require('@angular/core/src/change_detection/change_detection');
var import8 = require('../../../lib/models/tree.model');
var import9 = require('@angular/core/src/linker/component_factory_resolver');
var import10 = require('../../../lib/components/adhoc-component-factory.service');
var import11 = require('@angular/core/src/metadata/view');
var import12 = require('@angular/core/src/linker/component_factory');
var renderType_TreeNodeContent_Host = null;
var _View_TreeNodeContent_Host0 = (function (_super) {
    __extends(_View_TreeNodeContent_Host0, _super);
    function _View_TreeNodeContent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeNodeContent_Host0, renderType_TreeNodeContent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeNodeContent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('TreeNodeContent', rootSelector, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_TreeNodeContent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._TreeNodeContent_0_5 = new import3.TreeNodeContent(this.parentInjector.get(import8.TreeModel), this.parentInjector.get(import9.ComponentFactoryResolver), this._appEl_0.vcRef, this.parentInjector.get(import10.AdHocComponentFactoryCreator));
        this._appEl_0.initComponent(this._TreeNodeContent_0_5, [], compView_0);
        compView_0.create(this._TreeNodeContent_0_5, this.projectableNodes, null);
        this.init([].concat([this._appEl_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_TreeNodeContent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.TreeNodeContent) && (0 === requestNodeIndex))) {
            return this._TreeNodeContent_0_5;
        }
        return notFoundResult;
    };
    _View_TreeNodeContent_Host0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._TreeNodeContent_0_5.ngAfterViewInit();
            }
        }
    };
    return _View_TreeNodeContent_Host0;
}(import1.AppView));
function viewFactory_TreeNodeContent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_TreeNodeContent_Host === null)) {
        (renderType_TreeNodeContent_Host = viewUtils.createRenderComponentType('', 0, import11.ViewEncapsulation.None, [], {}));
    }
    return new _View_TreeNodeContent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.TreeNodeContentNgFactory = new import12.ComponentFactory('TreeNodeContent', viewFactory_TreeNodeContent_Host0, import3.TreeNodeContent);
var styles_TreeNodeContent = [];
var renderType_TreeNodeContent = null;
var _View_TreeNodeContent0 = (function (_super) {
    __extends(_View_TreeNodeContent0, _super);
    function _View_TreeNodeContent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeNodeContent0, renderType_TreeNodeContent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeNodeContent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this.init([], [], [], []);
        return null;
    };
    return _View_TreeNodeContent0;
}(import1.AppView));
function viewFactory_TreeNodeContent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_TreeNodeContent === null)) {
        (renderType_TreeNodeContent = viewUtils.createRenderComponentType('', 0, import11.ViewEncapsulation.None, styles_TreeNodeContent, {}));
    }
    return new _View_TreeNodeContent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_TreeNodeContent0 = viewFactory_TreeNodeContent0;
//# sourceMappingURL=data:application/json;base64,