/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import1 = require('@angular/core/src/linker/view');
var import2 = require('@angular/core/src/linker/element');
var import3 = require('../../../lib/models/tree.model');
var import4 = require('../../../lib/components/tree.component');
var import5 = require('@angular/core/src/linker/query_list');
var import6 = require('@angular/core/src/linker/view_utils');
var import8 = require('@angular/core/src/linker/view_type');
var import9 = require('@angular/core/src/change_detection/change_detection');
var import10 = require('@angular/core/src/metadata/view');
var import11 = require('@angular/core/src/linker/component_factory');
var import12 = require('@angular/common/src/directives/ng_for');
var import13 = require('@angular/core/src/linker/template_ref');
var import14 = require('@angular/core/src/change_detection/differs/iterable_differs');
var import15 = require('../../../lib/components/tree-node.component');
var import16 = require('./tree-node.component.ngfactory');
var import17 = require('@angular/core/src/linker/element_ref');
var renderType_TreeComponent_Host = null;
var _View_TreeComponent_Host0 = (function (_super) {
    __extends(_View_TreeComponent_Host0, _super);
    function _View_TreeComponent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeComponent_Host0, renderType_TreeComponent_Host, import8.ViewType.HOST, viewUtils, parentInjector, declarationEl, import9.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeComponent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('Tree', rootSelector, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_TreeComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._TreeModel_0_4 = new import3.TreeModel();
        this._TreeComponent_0_5 = new import4.TreeComponent(this._TreeModel_0_4);
        this._query_loadingTemplate_0_0 = new import5.QueryList();
        this._query_treeNodeTemplate_0_1 = new import5.QueryList();
        this._appEl_0.initComponent(this._TreeComponent_0_5, [], compView_0);
        this._query_loadingTemplate_0_0.reset([]);
        this._TreeComponent_0_5.loadingTemplate = this._query_loadingTemplate_0_0.first;
        this._query_treeNodeTemplate_0_1.reset([]);
        this._TreeComponent_0_5.treeNodeTemplate = this._query_treeNodeTemplate_0_1.first;
        compView_0.create(this._TreeComponent_0_5, this.projectableNodes, null);
        var disposable_0 = this.renderer.listenGlobal('body', 'keydown', this.eventHandler(this._handle_keydown_0_0.bind(this)));
        var disposable_1 = this.renderer.listenGlobal('body', 'mousedown', this.eventHandler(this._handle_mousedown_0_1.bind(this)));
        this.init([].concat([this._el_0]), [this._el_0], [
            disposable_0,
            disposable_1
        ], []);
        return this._appEl_0;
    };
    _View_TreeComponent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.TreeModel) && (0 === requestNodeIndex))) {
            return this._TreeModel_0_4;
        }
        if (((token === import4.TreeComponent) && (0 === requestNodeIndex))) {
            return this._TreeComponent_0_5;
        }
        return notFoundResult;
    };
    _View_TreeComponent_Host0.prototype._handle_keydown_0_0 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._TreeComponent_0_5.onKeydown($event) !== false);
        return (true && pd_0);
    };
    _View_TreeComponent_Host0.prototype._handle_mousedown_0_1 = function ($event) {
        this._appEl_0.componentView.markPathToRootAsCheckOnce();
        var pd_0 = (this._TreeComponent_0_5.onMousedown($event) !== false);
        return (true && pd_0);
    };
    return _View_TreeComponent_Host0;
}(import1.AppView));
function viewFactory_TreeComponent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_TreeComponent_Host === null)) {
        (renderType_TreeComponent_Host = viewUtils.createRenderComponentType('', 0, import10.ViewEncapsulation.None, [], {}));
    }
    return new _View_TreeComponent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.TreeComponentNgFactory = new import11.ComponentFactory('Tree', viewFactory_TreeComponent_Host0, import4.TreeComponent);
var styles_TreeComponent = [
    '.tree-children { padding-left: 20px }',
    '.tree {\n      display: inline-block;\n      cursor: pointer;\n      -webkit-touch-callout: none; /* iOS Safari */\n      -webkit-user-select: none;   /* Chrome/Safari/Opera */\n      -khtml-user-select: none;    /* Konqueror */\n      -moz-user-select: none;      /* Firefox */\n      -ms-user-select: none;       /* IE/Edge */\n      user-select: none;           /* non-prefixed version, currently not supported by any browser */\n    }'
];
var renderType_TreeComponent = null;
var _View_TreeComponent0 = (function (_super) {
    __extends(_View_TreeComponent0, _super);
    function _View_TreeComponent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeComponent0, renderType_TreeComponent, import8.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import9.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeComponent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_1 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_1, 'class', 'tree');
        this._text_2 = this.renderer.createText(this._el_1, '\n      ', null);
        this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1, null);
        this._appEl_3 = new import2.AppElement(3, 1, this, this._anchor_3);
        this._TemplateRef_3_5 = new import13.TemplateRef_(this._appEl_3, viewFactory_TreeComponent1);
        this._NgFor_3_6 = new import12.NgFor(this._appEl_3.vcRef, this._TemplateRef_3_5, this.parentInjector.get(import14.IterableDiffers), this.ref);
        this._text_4 = this.renderer.createText(this._el_1, '\n    ', null);
        this._text_5 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this._expr_0 = import9.UNINITIALIZED;
        this._expr_1 = import9.UNINITIALIZED;
        this.init([], [
            this._text_0,
            this._el_1,
            this._text_2,
            this._anchor_3,
            this._text_4,
            this._text_5
        ], [], []);
        return null;
    };
    _View_TreeComponent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import13.TemplateRef) && (3 === requestNodeIndex))) {
            return this._TemplateRef_3_5;
        }
        if (((token === import12.NgFor) && (3 === requestNodeIndex))) {
            return this._NgFor_3_6;
        }
        return notFoundResult;
    };
    _View_TreeComponent0.prototype.detectChangesInternal = function (throwOnChange) {
        var changes = null;
        changes = null;
        var currVal_1 = this.context.treeModel.roots;
        if (import6.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this._NgFor_3_6.ngForOf = currVal_1;
            if ((changes === null)) {
                (changes = {});
            }
            changes['ngForOf'] = new import9.SimpleChange(this._expr_1, currVal_1);
            this._expr_1 = currVal_1;
        }
        if ((changes !== null)) {
            this._NgFor_3_6.ngOnChanges(changes);
        }
        if (!throwOnChange) {
            this._NgFor_3_6.ngDoCheck();
        }
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = this.context.treeModel.isDragging();
        if (import6.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setElementClass(this._el_1, 'node-dragging', currVal_0);
            this._expr_0 = currVal_0;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_TreeComponent0;
}(import1.AppView));
function viewFactory_TreeComponent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_TreeComponent === null)) {
        (renderType_TreeComponent = viewUtils.createRenderComponentType('', 0, import10.ViewEncapsulation.None, styles_TreeComponent, {}));
    }
    return new _View_TreeComponent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_TreeComponent0 = viewFactory_TreeComponent0;
var _View_TreeComponent1 = (function (_super) {
    __extends(_View_TreeComponent1, _super);
    function _View_TreeComponent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeComponent1, renderType_TreeComponent, import8.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import9.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeComponent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createElement(null, 'TreeNode', null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = import16.viewFactory_TreeNodeComponent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._TreeNodeComponent_0_4 = new import15.TreeNodeComponent(new import17.ElementRef(this._el_0));
        this._appEl_0.initComponent(this._TreeNodeComponent_0_4, [], compView_0);
        this._text_1 = this.renderer.createText(null, '\n      ', null);
        compView_0.create(this._TreeNodeComponent_0_4, [], null);
        this._expr_0 = import9.UNINITIALIZED;
        this._expr_1 = import9.UNINITIALIZED;
        this._expr_2 = import9.UNINITIALIZED;
        this._expr_3 = import9.UNINITIALIZED;
        this.init([].concat([this._el_0]), [
            this._el_0,
            this._text_1
        ], [], []);
        return null;
    };
    _View_TreeComponent1.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import15.TreeNodeComponent) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) {
            return this._TreeNodeComponent_0_4;
        }
        return notFoundResult;
    };
    _View_TreeComponent1.prototype.detectChangesInternal = function (throwOnChange) {
        var currVal_0 = this.context.$implicit;
        if (import6.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this._TreeNodeComponent_0_4.node = currVal_0;
            this._expr_0 = currVal_0;
        }
        var currVal_1 = this.context.index;
        if (import6.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this._TreeNodeComponent_0_4.nodeIndex = currVal_1;
            this._expr_1 = currVal_1;
        }
        var currVal_2 = this.parent.context.treeNodeTemplate;
        if (import6.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this._TreeNodeComponent_0_4.treeNodeContentTemplate = currVal_2;
            this._expr_2 = currVal_2;
        }
        var currVal_3 = this.parent.context.loadingTemplate;
        if (import6.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this._TreeNodeComponent_0_4.loadingTemplate = currVal_3;
            this._expr_3 = currVal_3;
        }
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
        if (!throwOnChange) {
            if ((this.numberOfChecks === 0)) {
                this._TreeNodeComponent_0_4.ngAfterViewInit();
            }
        }
    };
    return _View_TreeComponent1;
}(import1.AppView));
function viewFactory_TreeComponent1(viewUtils, parentInjector, declarationEl) {
    return new _View_TreeComponent1(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=data:application/json;base64,