/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('@angular/core/src/linker/ng_module_factory');
var import1 = require('@angular/core/src/application_module');
var import2 = require('@angular/core/src/application_init');
var import3 = require('@angular/core/src/application_ref');
var import4 = require('@angular/core/src/linker/compiler');
var import5 = require('@angular/core/src/linker/view_utils');
var import7 = require('@angular/core/src/application_tokens');
var import8 = require('@angular/core/src/render/api');
var import9 = require('@angular/core/src/security');
var import10 = require('@angular/core/src/zone/ng_zone');
var import11 = require('@angular/core/src/console');
var import12 = require('@angular/core/src/error_handler');
var import13 = require('@angular/core/src/testability/testability');
var import14 = require('@angular/core/src/change_detection/differs/iterable_differs');
var import15 = require('@angular/core/src/change_detection/differs/keyvalue_differs');
var import16 = require('@angular/core/src/i18n/tokens');
var ApplicationModuleInjector = (function (_super) {
    __extends(ApplicationModuleInjector, _super);
    function ApplicationModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(ApplicationModuleInjector.prototype, "_ApplicationRef_3", {
        get: function () {
            if ((this.__ApplicationRef_3 == null)) {
                (this.__ApplicationRef_3 = this._ApplicationRef__2);
            }
            return this.__ApplicationRef_3;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationModuleInjector.prototype, "_Compiler_4", {
        get: function () {
            if ((this.__Compiler_4 == null)) {
                (this.__Compiler_4 = new import4.Compiler());
            }
            return this.__Compiler_4;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationModuleInjector.prototype, "_APP_ID_5", {
        get: function () {
            if ((this.__APP_ID_5 == null)) {
                (this.__APP_ID_5 = import7._appIdRandomProviderFactory());
            }
            return this.__APP_ID_5;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationModuleInjector.prototype, "_ViewUtils_6", {
        get: function () {
            if ((this.__ViewUtils_6 == null)) {
                (this.__ViewUtils_6 = new import5.ViewUtils(this.parent.get(import8.RootRenderer), this._APP_ID_5, this.parent.get(import9.Sanitizer)));
            }
            return this.__ViewUtils_6;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationModuleInjector.prototype, "_IterableDiffers_7", {
        get: function () {
            if ((this.__IterableDiffers_7 == null)) {
                (this.__IterableDiffers_7 = import1._iterableDiffersFactory());
            }
            return this.__IterableDiffers_7;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationModuleInjector.prototype, "_KeyValueDiffers_8", {
        get: function () {
            if ((this.__KeyValueDiffers_8 == null)) {
                (this.__KeyValueDiffers_8 = import1._keyValueDiffersFactory());
            }
            return this.__KeyValueDiffers_8;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ApplicationModuleInjector.prototype, "_LOCALE_ID_9", {
        get: function () {
            if ((this.__LOCALE_ID_9 == null)) {
                (this.__LOCALE_ID_9 = 'en-US');
            }
            return this.__LOCALE_ID_9;
        },
        enumerable: true,
        configurable: true
    });
    ApplicationModuleInjector.prototype.createInternal = function () {
        this._ApplicationModule_0 = new import1.ApplicationModule();
        this._ApplicationInitStatus_1 = new import2.ApplicationInitStatus(this.parent.get(import2.APP_INITIALIZER, null));
        this._ApplicationRef__2 = new import3.ApplicationRef_(this.parent.get(import10.NgZone), this.parent.get(import11.Console), this, this.parent.get(import12.ErrorHandler), this, this._ApplicationInitStatus_1, this.parent.get(import13.TestabilityRegistry, null), this.parent.get(import13.Testability, null));
        return this._ApplicationModule_0;
    };
    ApplicationModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import1.ApplicationModule)) {
            return this._ApplicationModule_0;
        }
        if ((token === import2.ApplicationInitStatus)) {
            return this._ApplicationInitStatus_1;
        }
        if ((token === import3.ApplicationRef_)) {
            return this._ApplicationRef__2;
        }
        if ((token === import3.ApplicationRef)) {
            return this._ApplicationRef_3;
        }
        if ((token === import4.Compiler)) {
            return this._Compiler_4;
        }
        if ((token === import7.APP_ID)) {
            return this._APP_ID_5;
        }
        if ((token === import5.ViewUtils)) {
            return this._ViewUtils_6;
        }
        if ((token === import14.IterableDiffers)) {
            return this._IterableDiffers_7;
        }
        if ((token === import15.KeyValueDiffers)) {
            return this._KeyValueDiffers_8;
        }
        if ((token === import16.LOCALE_ID)) {
            return this._LOCALE_ID_9;
        }
        return notFoundResult;
    };
    ApplicationModuleInjector.prototype.destroyInternal = function () {
        this._ApplicationRef__2.ngOnDestroy();
    };
    return ApplicationModuleInjector;
}(import0.NgModuleInjector));
exports.ApplicationModuleNgFactory = new import0.NgModuleFactory(ApplicationModuleInjector, import1.ApplicationModule);
//# sourceMappingURL=data:application/json;base64,