/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import1 = require('@angular/core/src/linker/view');
var import2 = require('@angular/core/src/linker/element');
var import3 = require('../../../lib/components/tree-node-drop-slot.component');
var import4 = require('@angular/core/src/linker/view_utils');
var import6 = require('@angular/core/src/linker/view_type');
var import7 = require('@angular/core/src/change_detection/change_detection');
var import8 = require('@angular/core/src/metadata/view');
var import9 = require('@angular/core/src/linker/component_factory');
var renderType_TreeNodeDropSlot_Host = null;
var _View_TreeNodeDropSlot_Host0 = (function (_super) {
    __extends(_View_TreeNodeDropSlot_Host0, _super);
    function _View_TreeNodeDropSlot_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeNodeDropSlot_Host0, renderType_TreeNodeDropSlot_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeNodeDropSlot_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('TreeNodeDropSlot', rootSelector, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_TreeNodeDropSlot0(this.viewUtils, this.injector(0), this._appEl_0);
        this._TreeNodeDropSlot_0_4 = new import3.TreeNodeDropSlot();
        this._appEl_0.initComponent(this._TreeNodeDropSlot_0_4, [], compView_0);
        compView_0.create(this._TreeNodeDropSlot_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_TreeNodeDropSlot_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.TreeNodeDropSlot) && (0 === requestNodeIndex))) {
            return this._TreeNodeDropSlot_0_4;
        }
        return notFoundResult;
    };
    return _View_TreeNodeDropSlot_Host0;
}(import1.AppView));
function viewFactory_TreeNodeDropSlot_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_TreeNodeDropSlot_Host === null)) {
        (renderType_TreeNodeDropSlot_Host = viewUtils.createRenderComponentType('', 0, import8.ViewEncapsulation.None, [], {}));
    }
    return new _View_TreeNodeDropSlot_Host0(viewUtils, parentInjector, declarationEl);
}
exports.TreeNodeDropSlotNgFactory = new import9.ComponentFactory('TreeNodeDropSlot', viewFactory_TreeNodeDropSlot_Host0, import3.TreeNodeDropSlot);
var styles_TreeNodeDropSlot = [
    '.node-drop-slot { display: block; height: 2px; width: 100%}',
    '.node-drop-slot.is-dragging-over { background: #ddffee; height: 20px; border: 2px dotted #888; }'
];
var renderType_TreeNodeDropSlot = null;
var _View_TreeNodeDropSlot0 = (function (_super) {
    __extends(_View_TreeNodeDropSlot0, _super);
    function _View_TreeNodeDropSlot0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeNodeDropSlot0, renderType_TreeNodeDropSlot, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeNodeDropSlot0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._text_0 = this.renderer.createText(parentRenderNode, '\n    ', null);
        this._el_1 = this.renderer.createElement(parentRenderNode, 'div', null);
        this.renderer.setElementAttribute(this._el_1, 'class', 'node-drop-slot');
        this._text_2 = this.renderer.createText(this._el_1, '\n    ', null);
        this._text_3 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this._expr_3 = import7.UNINITIALIZED;
        var disposable_0 = this.renderer.listen(this._el_1, 'drop', this.eventHandler(this._handle_drop_1_0.bind(this)));
        var disposable_1 = this.renderer.listen(this._el_1, 'dragover', this.eventHandler(this._handle_dragover_1_1.bind(this)));
        var disposable_2 = this.renderer.listen(this._el_1, 'dragleave', this.eventHandler(this._handle_dragleave_1_2.bind(this)));
        this.init([], [
            this._text_0,
            this._el_1,
            this._text_2,
            this._text_3
        ], [
            disposable_0,
            disposable_1,
            disposable_2
        ], []);
        return null;
    };
    _View_TreeNodeDropSlot0.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_3 = this.context.node.treeModel.isDraggingOver(this.context);
        if (import4.checkBinding(throwOnChange, this._expr_3, currVal_3)) {
            this.renderer.setElementClass(this._el_1, 'is-dragging-over', currVal_3);
            this._expr_3 = currVal_3;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    _View_TreeNodeDropSlot0.prototype._handle_drop_1_0 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context.onDrop($event) !== false);
        return (true && pd_0);
    };
    _View_TreeNodeDropSlot0.prototype._handle_dragover_1_1 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context.onDragOver($event) !== false);
        return (true && pd_0);
    };
    _View_TreeNodeDropSlot0.prototype._handle_dragleave_1_2 = function ($event) {
        this.markPathToRootAsCheckOnce();
        var pd_0 = (this.context.onDragLeave() !== false);
        return (true && pd_0);
    };
    return _View_TreeNodeDropSlot0;
}(import1.AppView));
function viewFactory_TreeNodeDropSlot0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_TreeNodeDropSlot === null)) {
        (renderType_TreeNodeDropSlot = viewUtils.createRenderComponentType('', 0, import8.ViewEncapsulation.None, styles_TreeNodeDropSlot, {}));
    }
    return new _View_TreeNodeDropSlot0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_TreeNodeDropSlot0 = viewFactory_TreeNodeDropSlot0;
//# sourceMappingURL=data:application/json;base64,