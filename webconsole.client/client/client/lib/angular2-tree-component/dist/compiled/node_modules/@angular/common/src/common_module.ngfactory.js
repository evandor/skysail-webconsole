/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import0 = require('@angular/core/src/linker/ng_module_factory');
var import1 = require('@angular/common/src/common_module');
var import2 = require('@angular/common/src/localization');
var import4 = require('@angular/core/src/i18n/tokens');
var CommonModuleInjector = (function (_super) {
    __extends(CommonModuleInjector, _super);
    function CommonModuleInjector(parent) {
        _super.call(this, parent, [], []);
    }
    Object.defineProperty(CommonModuleInjector.prototype, "_NgLocalization_1", {
        get: function () {
            if ((this.__NgLocalization_1 == null)) {
                (this.__NgLocalization_1 = new import2.NgLocaleLocalization(this.parent.get(import4.LOCALE_ID)));
            }
            return this.__NgLocalization_1;
        },
        enumerable: true,
        configurable: true
    });
    CommonModuleInjector.prototype.createInternal = function () {
        this._CommonModule_0 = new import1.CommonModule();
        return this._CommonModule_0;
    };
    CommonModuleInjector.prototype.getInternal = function (token, notFoundResult) {
        if ((token === import1.CommonModule)) {
            return this._CommonModule_0;
        }
        if ((token === import2.NgLocalization)) {
            return this._NgLocalization_1;
        }
        return notFoundResult;
    };
    CommonModuleInjector.prototype.destroyInternal = function () {
    };
    return CommonModuleInjector;
}(import0.NgModuleInjector));
exports.CommonModuleNgFactory = new import0.NgModuleFactory(CommonModuleInjector, import1.CommonModule);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uX21vZHVsZS5uZ2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9jb21waWxlZC9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvY29tbW9uL3NyYy9jb21tb25fbW9kdWxlLm5nZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFDRixvQkFBb0I7Ozs7Ozs7QUFFckIsSUFBWSxPQUFPLFdBQU0sNENBQTRDLENBQUMsQ0FBQTtBQUN0RSxJQUFZLE9BQU8sV0FBTSxtQ0FBbUMsQ0FBQyxDQUFBO0FBQzdELElBQVksT0FBTyxXQUFNLGtDQUFrQyxDQUFDLENBQUE7QUFFNUQsSUFBWSxPQUFPLFdBQU0sK0JBQStCLENBQUMsQ0FBQTtBQUN6RDtJQUFtQyx3Q0FBOEM7SUFHL0UsOEJBQVksTUFBdUI7UUFDakMsa0JBQU0sTUFBTSxFQUFFLEVBQVksRUFBRSxFQUFZLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBQ0Qsc0JBQUksbURBQWlCO2FBQXJCO1lBQ0UsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLElBQUssSUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksT0FBTyxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxDQUFDO1lBQ3JKLE1BQU0sQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUM7UUFDakMsQ0FBQzs7O09BQUE7SUFDRCw2Q0FBYyxHQUFkO1FBQ0UsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNsRCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUM5QixDQUFDO0lBQ0QsMENBQVcsR0FBWCxVQUFZLEtBQVMsRUFBQyxjQUFrQjtRQUN0QyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUM7UUFBQyxDQUFDO1FBQ3RFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBQUMsQ0FBQztRQUMxRSxNQUFNLENBQUMsY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFDRCw4Q0FBZSxHQUFmO0lBQ0EsQ0FBQztJQUNILDJCQUFDO0FBQUQsQ0FBQyxBQXJCRCxDQUFtQyxPQUFPLENBQUMsZ0JBQWdCLEdBcUIxRDtBQUNZLDZCQUFxQixHQUFpRCxJQUFJLE9BQU8sQ0FBQyxlQUFlLENBQUMsb0JBQW9CLEVBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGlzIGZpbGUgaXMgZ2VuZXJhdGVkIGJ5IHRoZSBBbmd1bGFyIDIgdGVtcGxhdGUgY29tcGlsZXIuXG4gKiBEbyBub3QgZWRpdC5cbiAqL1xuIC8qIHRzbGludDpkaXNhYmxlICovXG5cbmltcG9ydCAqIGFzIGltcG9ydDAgZnJvbSAnQGFuZ3VsYXIvY29yZS9zcmMvbGlua2VyL25nX21vZHVsZV9mYWN0b3J5JztcbmltcG9ydCAqIGFzIGltcG9ydDEgZnJvbSAnQGFuZ3VsYXIvY29tbW9uL3NyYy9jb21tb25fbW9kdWxlJztcbmltcG9ydCAqIGFzIGltcG9ydDIgZnJvbSAnQGFuZ3VsYXIvY29tbW9uL3NyYy9sb2NhbGl6YXRpb24nO1xuaW1wb3J0ICogYXMgaW1wb3J0MyBmcm9tICdAYW5ndWxhci9jb3JlL3NyYy9kaS9pbmplY3Rvcic7XG5pbXBvcnQgKiBhcyBpbXBvcnQ0IGZyb20gJ0Bhbmd1bGFyL2NvcmUvc3JjL2kxOG4vdG9rZW5zJztcbmNsYXNzIENvbW1vbk1vZHVsZUluamVjdG9yIGV4dGVuZHMgaW1wb3J0MC5OZ01vZHVsZUluamVjdG9yPGltcG9ydDEuQ29tbW9uTW9kdWxlPiB7XG4gIF9Db21tb25Nb2R1bGVfMDppbXBvcnQxLkNvbW1vbk1vZHVsZTtcbiAgX19OZ0xvY2FsaXphdGlvbl8xOmltcG9ydDIuTmdMb2NhbGVMb2NhbGl6YXRpb247XG4gIGNvbnN0cnVjdG9yKHBhcmVudDppbXBvcnQzLkluamVjdG9yKSB7XG4gICAgc3VwZXIocGFyZW50LChbXSBhcyBhbnlbXSksKFtdIGFzIGFueVtdKSk7XG4gIH1cbiAgZ2V0IF9OZ0xvY2FsaXphdGlvbl8xKCk6aW1wb3J0Mi5OZ0xvY2FsZUxvY2FsaXphdGlvbiB7XG4gICAgaWYgKCh0aGlzLl9fTmdMb2NhbGl6YXRpb25fMSA9PSAobnVsbCBhcyBhbnkpKSkgeyAodGhpcy5fX05nTG9jYWxpemF0aW9uXzEgPSBuZXcgaW1wb3J0Mi5OZ0xvY2FsZUxvY2FsaXphdGlvbih0aGlzLnBhcmVudC5nZXQoaW1wb3J0NC5MT0NBTEVfSUQpKSk7IH1cbiAgICByZXR1cm4gdGhpcy5fX05nTG9jYWxpemF0aW9uXzE7XG4gIH1cbiAgY3JlYXRlSW50ZXJuYWwoKTppbXBvcnQxLkNvbW1vbk1vZHVsZSB7XG4gICAgdGhpcy5fQ29tbW9uTW9kdWxlXzAgPSBuZXcgaW1wb3J0MS5Db21tb25Nb2R1bGUoKTtcbiAgICByZXR1cm4gdGhpcy5fQ29tbW9uTW9kdWxlXzA7XG4gIH1cbiAgZ2V0SW50ZXJuYWwodG9rZW46YW55LG5vdEZvdW5kUmVzdWx0OmFueSk6YW55IHtcbiAgICBpZiAoKHRva2VuID09PSBpbXBvcnQxLkNvbW1vbk1vZHVsZSkpIHsgcmV0dXJuIHRoaXMuX0NvbW1vbk1vZHVsZV8wOyB9XG4gICAgaWYgKCh0b2tlbiA9PT0gaW1wb3J0Mi5OZ0xvY2FsaXphdGlvbikpIHsgcmV0dXJuIHRoaXMuX05nTG9jYWxpemF0aW9uXzE7IH1cbiAgICByZXR1cm4gbm90Rm91bmRSZXN1bHQ7XG4gIH1cbiAgZGVzdHJveUludGVybmFsKCk6dm9pZCB7XG4gIH1cbn1cbmV4cG9ydCBjb25zdCBDb21tb25Nb2R1bGVOZ0ZhY3Rvcnk6aW1wb3J0MC5OZ01vZHVsZUZhY3Rvcnk8aW1wb3J0MS5Db21tb25Nb2R1bGU+ID0gbmV3IGltcG9ydDAuTmdNb2R1bGVGYWN0b3J5KENvbW1vbk1vZHVsZUluamVjdG9yLGltcG9ydDEuQ29tbW9uTW9kdWxlKTsiXX0=