/**
 * This file is generated by the Angular 2 template compiler.
 * Do not edit.
 */
/* tslint:disable */
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var import1 = require('@angular/core/src/linker/view');
var import2 = require('@angular/core/src/linker/element');
var import3 = require('../../../lib/components/tree-node-content.component');
var import4 = require('@angular/core/src/linker/view_utils');
var import6 = require('@angular/core/src/linker/view_type');
var import7 = require('@angular/core/src/change_detection/change_detection');
var import8 = require('@angular/core/src/metadata/view');
var import9 = require('@angular/core/src/linker/component_factory');
var import10 = require('@angular/common/src/directives/ng_if');
var import11 = require('@angular/common/src/directives/ng_template_outlet');
var import12 = require('@angular/core/src/linker/template_ref');
var renderType_TreeNodeContent_Host = null;
var _View_TreeNodeContent_Host0 = (function (_super) {
    __extends(_View_TreeNodeContent_Host0, _super);
    function _View_TreeNodeContent_Host0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeNodeContent_Host0, renderType_TreeNodeContent_Host, import6.ViewType.HOST, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeNodeContent_Host0.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.selectOrCreateHostElement('TreeNodeContent', rootSelector, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._el_0);
        var compView_0 = viewFactory_TreeNodeContent0(this.viewUtils, this.injector(0), this._appEl_0);
        this._TreeNodeContent_0_4 = new import3.TreeNodeContent();
        this._appEl_0.initComponent(this._TreeNodeContent_0_4, [], compView_0);
        compView_0.create(this._TreeNodeContent_0_4, this.projectableNodes, null);
        this.init([].concat([this._el_0]), [this._el_0], [], []);
        return this._appEl_0;
    };
    _View_TreeNodeContent_Host0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import3.TreeNodeContent) && (0 === requestNodeIndex))) {
            return this._TreeNodeContent_0_4;
        }
        return notFoundResult;
    };
    return _View_TreeNodeContent_Host0;
}(import1.AppView));
function viewFactory_TreeNodeContent_Host0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_TreeNodeContent_Host === null)) {
        (renderType_TreeNodeContent_Host = viewUtils.createRenderComponentType('', 0, import8.ViewEncapsulation.None, [], {}));
    }
    return new _View_TreeNodeContent_Host0(viewUtils, parentInjector, declarationEl);
}
exports.TreeNodeContentNgFactory = new import9.ComponentFactory('TreeNodeContent', viewFactory_TreeNodeContent_Host0, import3.TreeNodeContent);
var styles_TreeNodeContent = [];
var renderType_TreeNodeContent = null;
var _View_TreeNodeContent0 = (function (_super) {
    __extends(_View_TreeNodeContent0, _super);
    function _View_TreeNodeContent0(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeNodeContent0, renderType_TreeNodeContent, import6.ViewType.COMPONENT, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeNodeContent0.prototype.createInternal = function (rootSelector) {
        var parentRenderNode = this.renderer.createViewRoot(this.declarationAppElement.nativeElement);
        this._anchor_0 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._appEl_0 = new import2.AppElement(0, null, this, this._anchor_0);
        this._TemplateRef_0_5 = new import12.TemplateRef_(this._appEl_0, viewFactory_TreeNodeContent1);
        this._NgIf_0_6 = new import10.NgIf(this._appEl_0.vcRef, this._TemplateRef_0_5);
        this._text_1 = this.renderer.createText(parentRenderNode, '\n  ', null);
        this._anchor_2 = this.renderer.createTemplateAnchor(parentRenderNode, null);
        this._appEl_2 = new import2.AppElement(2, null, this, this._anchor_2);
        this._TemplateRef_2_5 = new import12.TemplateRef_(this._appEl_2, viewFactory_TreeNodeContent2);
        this._NgTemplateOutlet_2_6 = new import11.NgTemplateOutlet(this._appEl_2.vcRef);
        this._expr_0 = import7.UNINITIALIZED;
        this._map_0 = import4.pureProxy1(function (p0) {
            return { $implicit: p0 };
        });
        this._expr_1 = import7.UNINITIALIZED;
        this._expr_2 = import7.UNINITIALIZED;
        this.init([], [
            this._anchor_0,
            this._text_1,
            this._anchor_2
        ], [], []);
        return null;
    };
    _View_TreeNodeContent0.prototype.injectorGetInternal = function (token, requestNodeIndex, notFoundResult) {
        if (((token === import12.TemplateRef) && (0 === requestNodeIndex))) {
            return this._TemplateRef_0_5;
        }
        if (((token === import10.NgIf) && (0 === requestNodeIndex))) {
            return this._NgIf_0_6;
        }
        if (((token === import12.TemplateRef) && (2 === requestNodeIndex))) {
            return this._TemplateRef_2_5;
        }
        if (((token === import11.NgTemplateOutlet) && (2 === requestNodeIndex))) {
            return this._NgTemplateOutlet_2_6;
        }
        return notFoundResult;
    };
    _View_TreeNodeContent0.prototype.detectChangesInternal = function (throwOnChange) {
        var changes = null;
        var currVal_0 = !this.context.treeNodeContentTemplate;
        if (import4.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this._NgIf_0_6.ngIf = currVal_0;
            this._expr_0 = currVal_0;
        }
        changes = null;
        var currVal_1 = this._map_0(this.context.node);
        if (import4.checkBinding(throwOnChange, this._expr_1, currVal_1)) {
            this._NgTemplateOutlet_2_6.ngOutletContext = currVal_1;
            if ((changes === null)) {
                (changes = {});
            }
            changes['ngOutletContext'] = new import7.SimpleChange(this._expr_1, currVal_1);
            this._expr_1 = currVal_1;
        }
        var currVal_2 = this.context.treeNodeContentTemplate;
        if (import4.checkBinding(throwOnChange, this._expr_2, currVal_2)) {
            this._NgTemplateOutlet_2_6.ngTemplateOutlet = currVal_2;
            if ((changes === null)) {
                (changes = {});
            }
            changes['ngTemplateOutlet'] = new import7.SimpleChange(this._expr_2, currVal_2);
            this._expr_2 = currVal_2;
        }
        if ((changes !== null)) {
            this._NgTemplateOutlet_2_6.ngOnChanges(changes);
        }
        this.detectContentChildrenChanges(throwOnChange);
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_TreeNodeContent0;
}(import1.AppView));
function viewFactory_TreeNodeContent0(viewUtils, parentInjector, declarationEl) {
    if ((renderType_TreeNodeContent === null)) {
        (renderType_TreeNodeContent = viewUtils.createRenderComponentType('', 0, import8.ViewEncapsulation.None, styles_TreeNodeContent, {}));
    }
    return new _View_TreeNodeContent0(viewUtils, parentInjector, declarationEl);
}
exports.viewFactory_TreeNodeContent0 = viewFactory_TreeNodeContent0;
var _View_TreeNodeContent1 = (function (_super) {
    __extends(_View_TreeNodeContent1, _super);
    function _View_TreeNodeContent1(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeNodeContent1, renderType_TreeNodeContent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeNodeContent1.prototype.createInternal = function (rootSelector) {
        this._el_0 = this.renderer.createElement(null, 'span', null);
        this._text_1 = this.renderer.createText(this._el_0, '', null);
        this._expr_0 = import7.UNINITIALIZED;
        this.init([].concat([this._el_0]), [
            this._el_0,
            this._text_1
        ], [], []);
        return null;
    };
    _View_TreeNodeContent1.prototype.detectChangesInternal = function (throwOnChange) {
        this.detectContentChildrenChanges(throwOnChange);
        var currVal_0 = import4.interpolate(1, '', this.parent.context.node.displayField, '');
        if (import4.checkBinding(throwOnChange, this._expr_0, currVal_0)) {
            this.renderer.setText(this._text_1, currVal_0);
            this._expr_0 = currVal_0;
        }
        this.detectViewChildrenChanges(throwOnChange);
    };
    return _View_TreeNodeContent1;
}(import1.AppView));
function viewFactory_TreeNodeContent1(viewUtils, parentInjector, declarationEl) {
    return new _View_TreeNodeContent1(viewUtils, parentInjector, declarationEl);
}
var _View_TreeNodeContent2 = (function (_super) {
    __extends(_View_TreeNodeContent2, _super);
    function _View_TreeNodeContent2(viewUtils, parentInjector, declarationEl) {
        _super.call(this, _View_TreeNodeContent2, renderType_TreeNodeContent, import6.ViewType.EMBEDDED, viewUtils, parentInjector, declarationEl, import7.ChangeDetectorStatus.CheckAlways);
    }
    _View_TreeNodeContent2.prototype.createInternal = function (rootSelector) {
        this.init([], [], [], []);
        return null;
    };
    return _View_TreeNodeContent2;
}(import1.AppView));
function viewFactory_TreeNodeContent2(viewUtils, parentInjector, declarationEl) {
    return new _View_TreeNodeContent2(viewUtils, parentInjector, declarationEl);
}
//# sourceMappingURL=data:application/json;base64,