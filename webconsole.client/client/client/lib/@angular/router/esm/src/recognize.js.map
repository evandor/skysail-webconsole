{"version":3,"file":"recognize.js","sourceRoot":"","sources":["../../../../../modules/@angular/router/src/recognize.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Observer} from 'rxjs/Observer';\nimport {of } from 'rxjs/observable/of';\n\nimport {Route, RouterConfig} from './config';\nimport {ActivatedRouteSnapshot, RouterStateSnapshot} from './router_state';\nimport {PRIMARY_OUTLET, Params} from './shared';\nimport {UrlPathWithParams, UrlSegment, UrlTree, mapChildrenIntoArray} from './url_tree';\nimport {last, merge} from './utils/collection';\nimport {TreeNode} from './utils/tree';\n\nclass NoMatch {\n  constructor(public segment: UrlSegment = null) {}\n}\n\nexport function recognize(\n    rootComponentType: Type, config: RouterConfig, urlTree: UrlTree,\n    url: string): Observable<RouterStateSnapshot> {\n  try {\n    const children = processSegment(config, urlTree.root, {}, PRIMARY_OUTLET);\n    const root = new ActivatedRouteSnapshot(\n        [], {}, PRIMARY_OUTLET, rootComponentType, null, urlTree.root, -1);\n    const rootNode = new TreeNode<ActivatedRouteSnapshot>(root, children);\n    return of (new RouterStateSnapshot(url, rootNode, urlTree.queryParams, urlTree.fragment));\n  } catch (e) {\n    if (e instanceof NoMatch) {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) =>\n              obs.error(new Error(`Cannot match any routes: '${e.segment}'`)));\n    } else {\n      return new Observable<RouterStateSnapshot>(\n          (obs: Observer<RouterStateSnapshot>) => obs.error(e));\n    }\n  }\n}\n\nfunction processSegment(config: Route[], segment: UrlSegment, extraParams: Params, outlet: string):\n    TreeNode<ActivatedRouteSnapshot>[] {\n  if (segment.pathsWithParams.length === 0 && segment.hasChildren()) {\n    return processSegmentChildren(config, segment, extraParams);\n  } else {\n    return processPathsWithParams(config, segment, 0, segment.pathsWithParams, extraParams, outlet);\n  }\n}\n\nfunction processSegmentChildren(\n    config: Route[], segment: UrlSegment, extraParams: Params): TreeNode<ActivatedRouteSnapshot>[] {\n  const children = mapChildrenIntoArray(\n      segment, (child, childOutlet) => processSegment(config, child, extraParams, childOutlet));\n  checkOutletNameUniqueness(children);\n  sortActivatedRouteSnapshots(children);\n  return children;\n}\n\nfunction sortActivatedRouteSnapshots(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  nodes.sort((a, b) => {\n    if (a.value.outlet === PRIMARY_OUTLET) return -1;\n    if (b.value.outlet === PRIMARY_OUTLET) return 1;\n    return a.value.outlet.localeCompare(b.value.outlet);\n  });\n}\n\nfunction processPathsWithParams(\n    config: Route[], segment: UrlSegment, pathIndex: number, paths: UrlPathWithParams[],\n    extraParams: Params, outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n  for (let r of config) {\n    try {\n      return processPathsWithParamsAgainstRoute(r, segment, pathIndex, paths, extraParams, outlet);\n    } catch (e) {\n      if (!(e instanceof NoMatch)) throw e;\n    }\n  }\n  throw new NoMatch(segment);\n}\n\nfunction processPathsWithParamsAgainstRoute(\n    route: Route, rawSegment: UrlSegment, pathIndex: number, paths: UrlPathWithParams[],\n    parentExtraParams: Params, outlet: string): TreeNode<ActivatedRouteSnapshot>[] {\n  if (route.redirectTo) throw new NoMatch();\n\n  if ((route.outlet ? route.outlet : PRIMARY_OUTLET) !== outlet) throw new NoMatch();\n\n  if (route.path === '**') {\n    const params = paths.length > 0 ? last(paths).parameters : {};\n    const snapshot = new ActivatedRouteSnapshot(\n        paths, merge(parentExtraParams, params), outlet, route.component, route,\n        getSourceSegment(rawSegment), getPathIndexShift(rawSegment) - 1);\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n  }\n\n  const {consumedPaths, parameters, extraParams, lastChild} =\n      match(rawSegment, route, paths, parentExtraParams);\n  const rawSlicedPath = paths.slice(lastChild);\n  const childConfig = route.children ? route.children : [];\n\n  const {segment, slicedPath} = split(rawSegment, consumedPaths, rawSlicedPath, childConfig);\n\n  const snapshot = new ActivatedRouteSnapshot(\n      consumedPaths, parameters, outlet, route.component, route, getSourceSegment(rawSegment),\n      getPathIndexShift(rawSegment) + pathIndex + lastChild - 1);\n\n  if (slicedPath.length === 0 && segment.hasChildren()) {\n    const children = processSegmentChildren(childConfig, segment, extraParams);\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n\n  } else if (childConfig.length === 0 && slicedPath.length === 0) {\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, [])];\n\n  } else {\n    const children = processPathsWithParams(\n        childConfig, segment, pathIndex + lastChild, slicedPath, extraParams, PRIMARY_OUTLET);\n    return [new TreeNode<ActivatedRouteSnapshot>(snapshot, children)];\n  }\n}\n\nfunction match(\n    segment: UrlSegment, route: Route, paths: UrlPathWithParams[], parentExtraParams: Params) {\n  if (route.path === '') {\n    if (route.terminal && (segment.hasChildren() || paths.length > 0)) {\n      throw new NoMatch();\n    } else {\n      return {consumedPaths: [], lastChild: 0, parameters: {}, extraParams: {}};\n    }\n  }\n\n  const path = route.path;\n  const parts = path.split('/');\n  const posParameters: {[key: string]: any} = {};\n  const consumedPaths: UrlPathWithParams[] = [];\n\n  let currentIndex = 0;\n\n  for (let i = 0; i < parts.length; ++i) {\n    if (currentIndex >= paths.length) throw new NoMatch();\n    const current = paths[currentIndex];\n\n    const p = parts[i];\n    const isPosParam = p.startsWith(':');\n\n    if (!isPosParam && p !== current.path) throw new NoMatch();\n    if (isPosParam) {\n      posParameters[p.substring(1)] = current.path;\n    }\n    consumedPaths.push(current);\n    currentIndex++;\n  }\n\n  if (route.terminal && (segment.hasChildren() || currentIndex < paths.length)) {\n    throw new NoMatch();\n  }\n\n  const parameters = merge(\n      parentExtraParams, merge(posParameters, consumedPaths[consumedPaths.length - 1].parameters));\n  const extraParams = route.component ? {} : parameters;\n  return {consumedPaths, lastChild: currentIndex, parameters, extraParams};\n}\n\nfunction checkOutletNameUniqueness(nodes: TreeNode<ActivatedRouteSnapshot>[]): void {\n  const names: {[k: string]: ActivatedRouteSnapshot} = {};\n  nodes.forEach(n => {\n    let routeWithSameOutletName = names[n.value.outlet];\n    if (routeWithSameOutletName) {\n      const p = routeWithSameOutletName.url.map(s => s.toString()).join('/');\n      const c = n.value.url.map(s => s.toString()).join('/');\n      throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);\n    }\n    names[n.value.outlet] = n.value;\n  });\n}\n\nfunction getSourceSegment(segment: UrlSegment): UrlSegment {\n  let s = segment;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n  }\n  return s;\n}\n\nfunction getPathIndexShift(segment: UrlSegment): number {\n  let s = segment;\n  let res = 0;\n  while (s._sourceSegment) {\n    s = s._sourceSegment;\n    res += segment._pathIndexShift;\n  }\n  return res;\n}\n\nfunction split(\n    segment: UrlSegment, consumedPaths: UrlPathWithParams[], slicedPath: UrlPathWithParams[],\n    config: Route[]) {\n  if (slicedPath.length > 0 &&\n      containsEmptyPathMatchesWithNamedOutlets(segment, slicedPath, config)) {\n    const s = new UrlSegment(\n        consumedPaths,\n        createChildrenForEmptyPaths(\n            segment, consumedPaths, config, new UrlSegment(slicedPath, segment.children)));\n    s._sourceSegment = segment;\n    s._pathIndexShift = 0;\n    return {segment: s, slicedPath: []};\n\n  } else if (slicedPath.length === 0 && containsEmptyPathMatches(segment, slicedPath, config)) {\n    const s = new UrlSegment(\n        segment.pathsWithParams,\n        addEmptyPathsToChildrenIfNeeded(segment, slicedPath, config, segment.children));\n    s._sourceSegment = segment;\n    s._pathIndexShift = 0;\n    return {segment: s, slicedPath};\n\n  } else {\n    return {segment, slicedPath};\n  }\n}\n\nfunction addEmptyPathsToChildrenIfNeeded(\n    segment: UrlSegment, slicedPath: UrlPathWithParams[], routes: Route[],\n    children: {[name: string]: UrlSegment}): {[name: string]: UrlSegment} {\n  const res: {[name: string]: UrlSegment} = {};\n  for (let r of routes) {\n    if (emptyPathMatch(segment, slicedPath, r) && !children[getOutlet(r)]) {\n      const s = new UrlSegment([], {});\n      s._sourceSegment = segment;\n      s._pathIndexShift = segment.pathsWithParams.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return merge(children, res);\n}\n\nfunction createChildrenForEmptyPaths(\n    segment: UrlSegment, consumedPaths: UrlPathWithParams[], routes: Route[],\n    primarySegment: UrlSegment): {[name: string]: UrlSegment} {\n  const res: {[name: string]: UrlSegment} = {};\n  res[PRIMARY_OUTLET] = primarySegment;\n  primarySegment._sourceSegment = segment;\n  primarySegment._pathIndexShift = consumedPaths.length;\n\n  for (let r of routes) {\n    if (r.path === '') {\n      const s = new UrlSegment([], {});\n      s._sourceSegment = segment;\n      s._pathIndexShift = consumedPaths.length;\n      res[getOutlet(r)] = s;\n    }\n  }\n  return res;\n}\n\nfunction containsEmptyPathMatchesWithNamedOutlets(\n    segment: UrlSegment, slicedPath: UrlPathWithParams[], routes: Route[]): boolean {\n  return routes\n             .filter(r => emptyPathMatch(segment, slicedPath, r) && getOutlet(r) !== PRIMARY_OUTLET)\n             .length > 0;\n}\n\nfunction containsEmptyPathMatches(\n    segment: UrlSegment, slicedPath: UrlPathWithParams[], routes: Route[]): boolean {\n  return routes.filter(r => emptyPathMatch(segment, slicedPath, r)).length > 0;\n}\n\nfunction emptyPathMatch(segment: UrlSegment, slicedPath: UrlPathWithParams[], r: Route): boolean {\n  if ((segment.hasChildren() || slicedPath.length > 0) && r.terminal) return false;\n  return r.path === '' && r.redirectTo === undefined;\n}\n\nfunction getOutlet(route: Route): string {\n  return route.outlet ? route.outlet : PRIMARY_OUTLET;\n}\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}