{"version":3,"sources":["app/directives/adjacency.directive.ts"],"names":[],"mappings":"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","file":"app/directives/adjacency.directive.js","sourcesContent":["import {Component, Directive, ElementRef, Input, OnInit} from '@angular/core'\r\n\r\nimport {BackendServices} from '../services/backend.service';\r\n\r\nimport * as d3 from 'd3';\r\n\r\n\r\nclass Edge {\r\n    source: string;\r\n    target: string;\r\n    weight: number;\r\n\r\n    constructor(source, target, weight) {\r\n        this.source = source;\r\n        this.target = target;\r\n        this.weight = weight;\r\n    }\r\n}\r\n\r\nclass Node {\r\n    id: string;\r\n    followers: number;\r\n    following: number;\r\n\r\n    constructor(id, followers, following) {\r\n        this.id = id;\r\n        this.followers = followers;\r\n        this.following = following;\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: \"[adjacency]\"\r\n})\r\nexport class AdjacencyDirective implements OnInit {\r\n\r\n    /* @Input('d3MaxWidth') maxWidth: string;\r\n     @Input('d3MaxValue') maxValue: string;\r\n     @Input('d3PercentBar') value: string;\r\n     @Input('id') id: string;*/\r\n\r\n    // data: Array<number> = [];\r\n\r\n    edges = Array<Edge>();\r\n    //nodes = Array<Node>();\r\n    \r\n    rNodes = Array<Node>(); // requirererNodes\r\n    pNodes = Array<Node>(); // providerNodes\r\n\r\n    constructor(private _el: ElementRef, private _backend: BackendServices) { }\r\n\r\n    render() {\r\n        var edgeHash = {};\r\n        for (var x in this.edges) {\r\n            var id = this.edges[x].source + \"-\" + this.edges[x].target;\r\n            edgeHash[id] = this.edges[x];\r\n        };\r\n        var matrix = [];\r\n        for (var a in this.pNodes) {\r\n            for (var b in this.rNodes) {\r\n                var grid =\r\n                    {\r\n                        id: this.pNodes[a].id + \"-\" + this.rNodes[b].id,\r\n                        x: b, y: a, weight: 0\r\n                    };\r\n                if (edgeHash[grid.id]) {\r\n                    grid.weight = edgeHash[grid.id].weight;\r\n                };\r\n                matrix.push(grid);\r\n            };\r\n        };\r\n        d3.select(\"svg\")\r\n            .append(\"g\")\r\n            .attr(\"transform\", \"translate(50,50)\")\r\n            .attr(\"id\", \"adjacencyG\")\r\n            .selectAll(\"rect\")\r\n            .data(matrix)\r\n            .enter()\r\n            .append(\"rect\")\r\n            .attr(\"class\", \"grid\")\r\n            .attr(\"width\", 25)\r\n            .attr(\"height\", 25)\r\n            .attr(\"x\", function (d) { return d.x * 25 })\r\n            .attr(\"y\", function (d) { return d.y * 25 })\r\n            .style(\"fill-opacity\", function (d) { return d.weight * .2; })\r\n        var scaleSize = this.pNodes.length * 25;\r\n        var pNameScale = d3.scale.ordinal()\r\n            .domain(this.pNodes.map(function (el) { return el.id }))\r\n            .rangePoints([0, scaleSize], 1);\r\n        var rNameScale = d3.scale.ordinal()\r\n            .domain(this.rNodes.map(function (el) { return el.id }))\r\n            .rangePoints([0, scaleSize], 1);\r\n        var xAxis = d3.svg.axis()\r\n            .scale(rNameScale).orient(\"top\").tickSize(4);\r\n        var yAxis = d3.svg.axis()\r\n            .scale(pNameScale).orient(\"left\").tickSize(4);\r\n        d3.select(\"#adjacencyG\").append(\"g\").call(yAxis);\r\n        d3.select(\"#adjacencyG\").append(\"g\").call(xAxis)\r\n            .selectAll(\"text\")\r\n\r\n        d3.selectAll(\"rect.grid\").on(\"mouseover\", gridOver);\r\n        function gridOver(d, i) {\r\n            d3.selectAll(\"rect\").style(\"stroke-width\", function (p) {\r\n                return p.x == d.x || p.y == d.y ? \"3px\" : \"1px\"\r\n            });\r\n        };\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this._backend.getLatestSnapshot()\r\n            .subscribe(snapshot => {\r\n                var allNodes = Array<Node>();\r\n                snapshot.bundles.forEach(bundle => {\r\n                    if (bundle.id == \"0\") {\r\n                        return;\r\n                    }\r\n                    allNodes.push(new Node(bundle.id, 17, 500));\r\n                    var toCounter = new Map<string, number>();\r\n                    bundle.wireDescriptor.providedWires.forEach(wire => {\r\n                        var requirerId = wire.rid;\r\n                        if (toCounter.has(requirerId)) {\r\n                            var old = toCounter.get(requirerId);\r\n                            toCounter.set(requirerId, old + 1);\r\n                        } else {\r\n                            toCounter.set(requirerId, 1);\r\n                        }\r\n                        toCounter.forEach((value, index, map) => {\r\n                            if (index != \"0\") {\r\n                               // console.log(bundle.id + \": \" + index + \"/\" + value);\r\n                                this.edges.push(new Edge(bundle.id, index, value));\r\n                            }\r\n                        });\r\n                    });\r\n                })\r\n                allNodes.forEach(node => {\r\n                    if (this.getEdgeCount(node) > 0) {\r\n                       // this.nodes.push(node);\r\n                    }\r\n                    if (this.hasRequirements(node)) {\r\n                        this.rNodes.push(node);\r\n                    }\r\n                    if (this.hasCapabilities(node)) {\r\n                        this.pNodes.push(node);\r\n                    }\r\n                })\r\n                this.render();\r\n            });\r\n    }\r\n    \r\n    hasRequirements(node: Node): boolean {\r\n        for (var e of this.edges) {\r\n            if (e.target == node.id) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    \r\n     hasCapabilities(node: Node): boolean {\r\n        for (var e of this.edges) {\r\n            if (e.source == node.id) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getEdgeCount(node: Node): number {\r\n        for (var e of this.edges) {\r\n            if (e.target == node.id) {\r\n                return 1;\r\n            }\r\n        }\r\n        return 1;\r\n    }\r\n\r\n\r\n}"],"sourceRoot":"/source/"}