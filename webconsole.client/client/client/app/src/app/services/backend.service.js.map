{"version":3,"sources":["app/services/backend.service.ts"],"names":[],"mappings":"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","file":"src/app/services/backend.service.js","sourcesContent":["import {Injectable} from '@angular/core'\nimport {Http, Headers, RequestOptions} from '@angular/http'\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\nimport {Bundle} from '../domain/bundle';\nimport {ExportPackage} from '../domain/exportPackage';\nimport {LogEntry} from '../domain/logEntry';\nimport {Service} from '../domain/service';\nimport {Snapshot} from '../domain/snapshot';\n\nimport {ConfigService} from '../services/config.service';\n\n@Injectable()\nexport class BackendServices {\n\n    private _baseUrl = '';\n\n    constructor(private _http: Http, private _window: Window, private _config: ConfigService) {\n        var hostname = this._window.location.hostname;\n        this._baseUrl = \"http://\" + this._config.host + \":\" + this._config.port + \"/\";//baseUrl;\n        console.log(\"base url set to '\" + this._baseUrl + \"'\");\n    }\n\n    get(path) {\n        var headers = new Headers();\n        //headers.append('Authorization', 'Basic YWRtaW46c2t5c2FpbA==');\n        return this._http.get(this._baseUrl + path, { headers: headers })\n            .map(res => res.json());\n    }\n\n    getFramework(): Observable<any> {\n        return this._http.get(this._baseUrl + 'backend/framework')\n            .map(res => res.json());\n    }\n\n    getBundles(): Observable<Bundle[]> {\n        return this._http.get(this._baseUrl + 'backend/bundles')\n            .map(res => res.json());\n    }\n\n    getBundle(id): Observable<Bundle> {\n        return this._http.get(this._baseUrl + 'backend/bundles/' + id)\n            .map(res => res.json());\n    }\n\n    getBundleServices(id): Observable<Service[]> {\n        return this._http.get(this._baseUrl + 'backend/bundles/' + id + \"/services\")\n            .map(res => res.json());\n    }\n\n    getServices(): Observable<Service[]> {\n        return this._http.get(this._baseUrl + 'backend/services')\n            .map(res => res.json());\n    }\n\n    getService(id): Observable<Service> {\n        return this._http.get(this._baseUrl + 'backend/services/' + id)\n            .map(res => res.json());\n    }\n\n    getPackages(): Observable<ExportPackage[]> {\n        return this._http.get(this._baseUrl + 'backend/packages')\n            .map(res => res.json());\n    }\n\n    getLogs(): Observable<LogEntry[]> {\n        return this._http.get(this._baseUrl + 'backend/logs')\n            .map(res => res.json());\n    }\n\n    getSnapshots(): Observable<Snapshot[]> {\n        return this._http.get(this._baseUrl + 'backend/snapshots')\n            .map(res => res.json());\n    }\n\n    getLatestSnapshot(): Observable<Snapshot> {\n        return this._http.get(this._baseUrl + 'backend/snapshotdetails/latest')\n            .map(res => res.json());\n    }\n\n    createSnapshot() {\n        return this._http.post(this._baseUrl + 'backend/snapshots/', JSON.stringify(\"create\"))\n            //.map(res => res.json())\n            ;\n    }\n\n    getVersion() {\n        return this._http.get(this._baseUrl + 'client/version')\n            .map(res => res.text());\n    }\n}"],"sourceRoot":"/source/"}