{"version":3,"sources":["app/components/navbar/navbar.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAcA;gBAUI,gBAAoB,MAAc,EAAU,QAAyB,EAAU,WAAuB;oBAAlF,WAAM,GAAN,MAAM,CAAQ;oBAAU,aAAQ,GAAR,QAAQ,CAAiB;oBAAU,gBAAW,GAAX,WAAW,CAAY;oBANtG,oBAAe,GAAW,SAAS,CAAC;oBAE5B,YAAO,GAAG,KAAK,CAAC;oBAKpB,sEAAsE;oBACtE,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC;wBACzB;;;;;;;;;;;;2BAYG;oBACP,CAAC,CAAC,CAAC;gBACP,CAAC;gBAED,yBAAQ,GAAR;oBAAA,iBAIC;oBAHG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,WAAW,CAAC,oBAAoB,CAAC,SAAS,CAC/D,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,OAAO,GAAG,KAAK,EAApB,CAAoB,CAChC,CAAC;gBACN,CAAC;gBACD,4BAAW,GAAX;oBACI,kDAAkD;oBAClD,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,CAAC;gBACpC,CAAC;gBAED,0BAAS,GAAT;oBACI,OAAO,CAAC,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC1C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;gBACxB,CAAC;gBAED,oCAAmB,GAAnB;oBACI,IAAI,YAAoB,CAAC;oBACzB,yEAAyE;oBACzE,MAAM,CAAC,SAAS,CAAC,CAAA,0BAA0B;gBAC/C,CAAC;gBAED,4BAAW,GAAX,UAAY,QAAgB;oBACxB,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;wBACnC,MAAM,CAAC,iBAAiB,CAAC;oBAC7B,CAAC;oBACD,MAAM,CAAC,UAAU,CAAC;gBACtB,CAAC;gBAED,yBAAQ,GAAR;oBAAA,iBAEC;oBADG,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,SAAS,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,GAAG,GAAG,GAAG,EAAd,CAAc,CAAC,CAAC;gBACpE,CAAC;gBAED,sBAAI,iCAAa;yBAAjB;wBACI,MAAM,CAAC,IAAI,CAAC,CAAA,qCAAqC;oBACrD,CAAC;;;mBAAA;gBAED,wBAAO,GAAP;oBACI,6BAA6B;gBACjC,CAAC;gBAED,yBAAQ,GAAR;oBACI,8BAA8B;gBAClC,CAAC;gBAED,sBAAI,4BAAQ;yBAAZ;wBACI,MAAM,CAAC,OAAO,CAAC,CAAA,iCAAiC;oBACpD,CAAC;;;mBAAA;gBAED,sBAAI,wBAAI;yBAAR;wBACI,MAAM,CAAC,EAAE,CAAC,CAAA,qCAAqC;oBACnD,CAAC;;;mBAAA;gBAtFL;oBAAC,gBAAS,CAAC;wBACP,QAAQ,EAAE,QAAQ;wBAClB,UAAU,EAAE,CAAC,0BAAiB,CAAC;wBAC/B,SAAS,EAAE,CAAC,iCAAe,CAAC;wBAC5B,KAAK,EAAE,EAAE;wBACT,WAAW,EAAE,sCAAsC;qBACtD,CAAC;;0BAAA;gBAiFF,aAAC;YAAD,CAhFA,AAgFC,IAAA;YAhFD,2BAgFC,CAAA","file":"app/components/navbar/navbar.component.js","sourcesContent":["import {Component, OnInit} from \"@angular/core\";\nimport {ROUTER_DIRECTIVES, Router} from \"@angular/router\";\nimport {BackendServices} from '../../services/backend.service';\nimport {AppGlobals} from '../../services/appglobals.service';\nimport {Subscription} from 'rxjs/Subscription';\n\n\n@Component({\n    selector: 'navbar',\n    directives: [ROUTER_DIRECTIVES],\n    providers: [BackendServices],\n    pipes: [],\n    templateUrl: 'app/html/navbar/navbar.template.html'\n})\nexport class Navbar implements OnInit {\n\n    res;\n\n    currentMenuItem: string = \"Bundles\";\n\n    private loading = false;\n\n    subscription:Subscription;\n\n    constructor(private router: Router, private _backend: BackendServices, private _appGlobals: AppGlobals) {\n        //this._appGlobals.isLoading.subscribe(value => this.loading = value);\n        this.router.events.subscribe(() => {\n            /*if (val.startsWith(\"bundles\")) {\n                this.currentMenuItem = \"Bundles\";\n            } else if (val.startsWith(\"services\")) {\n                this.currentMenuItem = \"Services\";\n            } else if (val.startsWith(\"packages\")) {\n                this.currentMenuItem = \"Packages\";\n            } else if (val == \"logs\") {\n                this.currentMenuItem = \"Logs\";\n            } else if (val == \"help\") {\n                this.currentMenuItem = \"Help\";\n            } else {\n                this.currentMenuItem = \"Bundles\";\n            }*/\n        });\n    }\n\n    ngOnInit() {\n        this.subscription = this._appGlobals.isLoadingObservable$.subscribe(\n            value => this.loading = value\n        );\n    }\n    ngOnDestroy() {\n        // prevent memory leak when component is destroyed\n        this.subscription.unsubscribe();\n    }\n\n    isLoading(): boolean {\n        console.log(\"isLoading: \" + this.loading);\n        return this.loading;\n    }\n\n    getBundlesMenuTitle() {\n        var bundlesCount: number;\n        //this._backend.getBundles().subscribe(res => bundlesCount = res.length);\n        return \"Bundles\";//(\" + bundlesCount + \")\";\n    }\n\n    checkActive(menuItem: string) {\n        if (menuItem == this.currentMenuItem) {\n            return \"nav-item active\";\n        }\n        return \"nav-item\";\n    }\n\n    onSubmit() {\n        this._backend.createSnapshot().subscribe(res => this.res = res);\n    }\n\n    get authenticated() {\n        return true;//this.authService.isAuthenticated();\n    }\n\n    doLogin() {\n        //this.authService.doLogin();\n    }\n\n    doLogout() {\n        //this.authService.doLogout();\n    }\n\n    get userName() {\n        return \"admin\";//this.authService.getUserName();\n    }\n\n    get page() {\n        return \"\";//this.location.path().split('/')[1];\n    }\n}\n\n"],"sourceRoot":"/source/"}